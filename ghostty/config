font-family = "0xProto Nerd Font Mono"
font-style = default
font-style-bold = default
font-style-italic = default
font-style-bold-italic = default
font-synthetic-style = bold,italic,bold-italic
font-size = 14
font-thicken = true
grapheme-width-method = unicode
theme = "hackr-cyberpunk-vibes"
cursor-style = bar
mouse-hide-while-typing = true

mouse-shift-capture = false
background-opacity = 0.9
background-blur-radius = 70
unfocused-split-opacity = 0.6
scrollback-limit = 10000000

link-url = true
fullscreen = false
title = 
class = 
x11-instance-name = 
working-directory = "/Users/hackr"

# Key bindings. The format is `trigger=action`. Duplicate triggers will
# overwrite previously set values.
# 
# Trigger: `+`-separated list of keys and modifiers. Example: `ctrl+a`,
# `ctrl+shift+b`, `up`. Some notes:
# 
#   * modifiers cannot repeat, `ctrl+ctrl+a` is invalid.
# 
#   * modifiers and keys can be in any order, `shift+a+ctrl` is *weird*,
#     but valid.
# 
#   * only a single key input is allowed, `ctrl+a+b` is invalid.
# 
#   * the key input can be prefixed with `physical:` to specify a
#     physical key mapping rather than a logical one. A physical key
#     mapping responds to the hardware keycode and not the keycode
#     translated by any system keyboard layouts. Example: "ctrl+physical:a"
# 
# Valid modifiers are `shift`, `ctrl` (alias: `control`), `alt` (alias: `opt`,
# `option`), and `super` (alias: `cmd`, `command`). You may use the modifier
# or the alias. When debugging keybinds, the non-aliased modifier will always
# be used in output.
# 
# You may also specify multiple triggers separated by `>` to require a
# sequence of triggers to activate the action. For example,
# `ctrl+a>n=new_window` will only trigger the `new_window` action if the
# user presses `ctrl+a` followed separately by `n`. In other software, this
# is sometimes called a leader key, a key chord, a key table, etc. There
# is no hardcoded limit on the number of parts in a sequence.
# 
# Warning: if you define a sequence as a CLI argument to `ghostty`,
# you probably have to quote the keybind since `>` is a special character
# in most shells. Example: ghostty --keybind='ctrl+a>n=new_window'
# 
# A trigger sequence has some special handling:
# 
#   * Ghostty will wait an indefinite amount of time for the next key in
#     the sequence. There is no way to specify a timeout. The only way to
#     force the output of a prefix key is to assign another keybind to
#     specifically output that key (i.e. `ctrl+a>ctrl+a=text:foo`) or
#     press an unbound key which will send both keys to the program.
# 
#   * If a prefix in a sequence is previously bound, the sequence will
#     override the previous binding. For example, if `ctrl+a` is bound to
#     `new_window` and `ctrl+a>n` is bound to `new_tab`, pressing `ctrl+a`
#     will do nothing.
# 
#   * Adding to the above, if a previously bound sequence prefix is
#     used in a new, non-sequence binding, the entire previously bound
#     sequence will be unbound. For example, if you bind `ctrl+a>n` and
#     `ctrl+a>t`, and then bind `ctrl+a` directly, both `ctrl+a>n` and
#     `ctrl+a>t` will become unbound.
# 
# Action is the action to take when the trigger is satisfied. It takes the
# format `action` or `action:param`. The latter form is only valid if the
# action requires a parameter.
# 
#   * `ignore` - Do nothing, ignore the key input. This can be used to
#     black hole certain inputs to have no effect.
# 
#   * `unbind` - Remove the binding. This makes it so the previous action
#     is removed, and the key will be sent through to the child command
#     if it is printable.
# 
#   * `csi:text` - Send a CSI sequence. i.e. `csi:A` sends "cursor up".
# 
#   * `esc:text` - Send an escape sequence. i.e. `esc:d` deletes to the
#     end of the word to the right.
# 
#   * `text:text` - Send a string. Uses Zig string literal syntax.
#     i.e. `text:\x15` sends Ctrl-U.
# 
# Some notes for the action:
# 
#   * The parameter is taken as-is after the `:`. Double quotes or
#     other mechanisms are included and NOT parsed. If you want to
#     send a string value that includes spaces, wrap the entire
#     trigger/action in double quotes. Example: `--keybind="up=csi:A B"`
# 
# There are some additional special values that can be specified for
# keybind:
# 
#   * `keybind=clear` will clear all set keybindings. Warning: this
#     removes ALL keybindings up to this point, including the default
#     keybindings.
# 
# A keybind by default causes the input to be consumed. This means that the
# associated encoding (if any) will not be sent to the running program
# in the terminal. If you wish to send the encoded value to the program,
# specify the "unconsumed:" prefix before the entire keybind. For example:
# "unconsumed:ctrl+a=reload_config"

keybind = super+alt+i=inspector:toggle
keybind = super+w=close_surface
keybind = shift+up=adjust_selection:up
keybind = super+enter=toggle_fullscreen
keybind = super+t=new_tab
keybind = super+c=copy_to_clipboard
keybind = super+shift+right_bracket=next_tab
keybind = shift+left=adjust_selection:left
keybind = super+equal=increase_font_size:1
keybind = shift+page_up=adjust_selection:page_up
keybind = super+ctrl+down=resize_split:down,10
keybind = shift+end=adjust_selection:end
keybind = super+plus=increase_font_size:1
keybind = super+q=quit
keybind = super+home=scroll_to_top
keybind = super+ctrl+left=resize_split:left,10
keybind = super+ctrl+up=resize_split:up,10
keybind = super+shift+up=jump_to_prompt:-1
keybind = shift+right=adjust_selection:right
keybind = super+comma=open_config
keybind = super+shift+comma=reload_config
keybind = super+minus=decrease_font_size:1
keybind = shift+page_down=adjust_selection:page_down
keybind = super+a=select_all
keybind = alt+shift+equal=equalize_splits
keybind = super+shift+enter=toggle_split_zoom
keybind = super+ctrl+f=toggle_fullscreen
keybind = super+ctrl+right=resize_split:right,10
keybind = super+alt+shift+j=write_scrollback_file:open
keybind = shift+down=adjust_selection:down
keybind = super+n=new_window
keybind = super+page_down=scroll_page_down
keybind = super+alt+shift+w=close_all_windows
keybind = super+end=scroll_to_bottom
keybind = super+shift+j=write_scrollback_file:paste
keybind = super+zero=reset_font_size
keybind = shift+home=adjust_selection:home
keybind = super+k=clear_screen
keybind = super+v=paste_from_clipboard

keybind = super+d=new_split:right
keybind = super+shift+d=new_split:down

keybind = super+alt+right=goto_split:right
keybind = super+alt+down=goto_split:bottom
keybind = super+alt+left=goto_split:left
keybind = super+alt+up=goto_split:top
keybind = super+left_bracket=goto_split:previous
keybind = super+right_bracket=goto_split:next

keybind = super+physical:one=goto_tab:1
keybind = super+physical:two=goto_tab:2
keybind = super+physical:three=goto_tab:3
keybind = super+physical:four=goto_tab:4
keybind = super+physical:five=goto_tab:5
keybind = super+physical:six=goto_tab:6
keybind = super+physical:seven=goto_tab:7
keybind = super+physical:eight=goto_tab:8
keybind = super+physical:nine=goto_tab:9
keybind = super+physical:zero=last_tab

window-padding-x = 16
window-padding-y = 8
window-padding-balance = false
window-padding-color = extend
# keep the following enabled unless you want to test out what a kernel panic looks like
window-vsync = true 
window-inherit-working-directory = false
window-inherit-font-size = true
window-decoration = true
window-title-font-family = "0xProto Nerd Font Mono"
window-theme = auto
window-colorspace = srgb
window-height = 0
window-width = 0
window-save-state = default
window-step-resize = false
window-new-tab-position = current

resize-overlay = after-first
resize-overlay-position = center
resize-overlay-duration = 750ms

focus-follows-mouse = true

clipboard-read = allow
clipboard-write = allow
clipboard-trim-trailing-spaces = true
clipboard-paste-protection = true
clipboard-paste-bracketed-safe = true
image-storage-limit = 320000000
copy-on-select = true
click-repeat-interval = 0

confirm-close-surface = false
quit-after-last-window-closed = true
initial-window = true
shell-integration = detect
shell-integration-features = cursor,no-sudo,title
osc-color-report-format = 16-bit
vt-kam-allowed = false
custom-shader = "shaders/bloom.glsl"
custom-shader-animation = true
macos-non-native-fullscreen = false
macos-titlebar-style = tabs
macos-option-as-alt = false
macos-window-shadow = true
desktop-notifications = true
bold-is-bright = false

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key
# protocols (specifically this will enable `modifyOtherKeys`), among other
# features. An option exists in vim to modify this: `:set
# keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it
# from working properly. https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty
